// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc2
// source: policy/v1/policy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PolicyClient is the client API for Policy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PolicyClient interface {
	// 服务功能
	CreatePolicy(ctx context.Context, in *PolicyStruct, opts ...grpc.CallOption) (*PolicyStruct, error)
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*PolicyStruct, error)
	ListPolicy(ctx context.Context, in *ListPolicyRequest, opts ...grpc.CallOption) (*ListPolicyReply, error)
	UpdatePolicy(ctx context.Context, in *PolicyStruct, opts ...grpc.CallOption) (*PolicyStruct, error)
	DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*PolicyStruct, error)
}

type policyClient struct {
	cc grpc.ClientConnInterface
}

func NewPolicyClient(cc grpc.ClientConnInterface) PolicyClient {
	return &policyClient{cc}
}

func (c *policyClient) CreatePolicy(ctx context.Context, in *PolicyStruct, opts ...grpc.CallOption) (*PolicyStruct, error) {
	out := new(PolicyStruct)
	err := c.cc.Invoke(ctx, "/api.policy.v1.Policy/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*PolicyStruct, error) {
	out := new(PolicyStruct)
	err := c.cc.Invoke(ctx, "/api.policy.v1.Policy/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyClient) ListPolicy(ctx context.Context, in *ListPolicyRequest, opts ...grpc.CallOption) (*ListPolicyReply, error) {
	out := new(ListPolicyReply)
	err := c.cc.Invoke(ctx, "/api.policy.v1.Policy/ListPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyClient) UpdatePolicy(ctx context.Context, in *PolicyStruct, opts ...grpc.CallOption) (*PolicyStruct, error) {
	out := new(PolicyStruct)
	err := c.cc.Invoke(ctx, "/api.policy.v1.Policy/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policyClient) DeletePolicy(ctx context.Context, in *DeletePolicyRequest, opts ...grpc.CallOption) (*PolicyStruct, error) {
	out := new(PolicyStruct)
	err := c.cc.Invoke(ctx, "/api.policy.v1.Policy/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PolicyServer is the policy API for Policy service.
// All implementations must embed UnimplementedPolicyServer
// for forward compatibility
type PolicyServer interface {
	// 服务功能
	CreatePolicy(context.Context, *PolicyStruct) (*PolicyStruct, error)
	GetPolicy(context.Context, *GetPolicyRequest) (*PolicyStruct, error)
	ListPolicy(context.Context, *ListPolicyRequest) (*ListPolicyReply, error)
	UpdatePolicy(context.Context, *PolicyStruct) (*PolicyStruct, error)
	DeletePolicy(context.Context, *DeletePolicyRequest) (*PolicyStruct, error)
	mustEmbedUnimplementedPolicyServer()
}

// UnimplementedPolicyServer must be embedded to have forward compatible implementations.
type UnimplementedPolicyServer struct {
}

func (UnimplementedPolicyServer) CreatePolicy(context.Context, *PolicyStruct) (*PolicyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedPolicyServer) GetPolicy(context.Context, *GetPolicyRequest) (*PolicyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedPolicyServer) ListPolicy(context.Context, *ListPolicyRequest) (*ListPolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicy not implemented")
}
func (UnimplementedPolicyServer) UpdatePolicy(context.Context, *PolicyStruct) (*PolicyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedPolicyServer) DeletePolicy(context.Context, *DeletePolicyRequest) (*PolicyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedPolicyServer) mustEmbedUnimplementedPolicyServer() {}

// UnsafePolicyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PolicyServer will
// result in compilation errors.
type UnsafePolicyServer interface {
	mustEmbedUnimplementedPolicyServer()
}

func RegisterPolicyServer(s grpc.ServiceRegistrar, srv PolicyServer) {
	s.RegisterService(&Policy_ServiceDesc, srv)
}

func _Policy_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.Policy/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).CreatePolicy(ctx, req.(*PolicyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policy_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.Policy/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policy_ListPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).ListPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.Policy/ListPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).ListPolicy(ctx, req.(*ListPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policy_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PolicyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.Policy/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).UpdatePolicy(ctx, req.(*PolicyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Policy_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PolicyServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.Policy/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PolicyServer).DeletePolicy(ctx, req.(*DeletePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Policy_ServiceDesc is the grpc.ServiceDesc for Policy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Policy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.policy.v1.Policy",
	HandlerType: (*PolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _Policy_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _Policy_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicy",
			Handler:    _Policy_ListPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _Policy_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _Policy_DeletePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy/v1/policy.proto",
}

// ImportPolicyClient is the client API for ImportPolicy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImportPolicyClient interface {
	// 服务功能
	CreatePolicy(ctx context.Context, in *ImportPolicyStruct, opts ...grpc.CallOption) (*ImportPolicyStruct, error)
	GetPolicy(ctx context.Context, in *GetImportPolicyRequest, opts ...grpc.CallOption) (*ImportPolicyStruct, error)
	ListPolicy(ctx context.Context, in *ListImportPolicyRequest, opts ...grpc.CallOption) (*ListImportPolicyReply, error)
	UpdatePolicy(ctx context.Context, in *ImportPolicyStruct, opts ...grpc.CallOption) (*ImportPolicyStruct, error)
	DeletePolicy(ctx context.Context, in *DeleteImportPolicyRequest, opts ...grpc.CallOption) (*ImportPolicyStruct, error)
}

type importPolicyClient struct {
	cc grpc.ClientConnInterface
}

func NewImportPolicyClient(cc grpc.ClientConnInterface) ImportPolicyClient {
	return &importPolicyClient{cc}
}

func (c *importPolicyClient) CreatePolicy(ctx context.Context, in *ImportPolicyStruct, opts ...grpc.CallOption) (*ImportPolicyStruct, error) {
	out := new(ImportPolicyStruct)
	err := c.cc.Invoke(ctx, "/api.policy.v1.ImportPolicy/CreatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importPolicyClient) GetPolicy(ctx context.Context, in *GetImportPolicyRequest, opts ...grpc.CallOption) (*ImportPolicyStruct, error) {
	out := new(ImportPolicyStruct)
	err := c.cc.Invoke(ctx, "/api.policy.v1.ImportPolicy/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importPolicyClient) ListPolicy(ctx context.Context, in *ListImportPolicyRequest, opts ...grpc.CallOption) (*ListImportPolicyReply, error) {
	out := new(ListImportPolicyReply)
	err := c.cc.Invoke(ctx, "/api.policy.v1.ImportPolicy/ListPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importPolicyClient) UpdatePolicy(ctx context.Context, in *ImportPolicyStruct, opts ...grpc.CallOption) (*ImportPolicyStruct, error) {
	out := new(ImportPolicyStruct)
	err := c.cc.Invoke(ctx, "/api.policy.v1.ImportPolicy/UpdatePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *importPolicyClient) DeletePolicy(ctx context.Context, in *DeleteImportPolicyRequest, opts ...grpc.CallOption) (*ImportPolicyStruct, error) {
	out := new(ImportPolicyStruct)
	err := c.cc.Invoke(ctx, "/api.policy.v1.ImportPolicy/DeletePolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportPolicyServer is the policy API for ImportPolicy service.
// All implementations must embed UnimplementedImportPolicyServer
// for forward compatibility
type ImportPolicyServer interface {
	// 服务功能
	CreatePolicy(context.Context, *ImportPolicyStruct) (*ImportPolicyStruct, error)
	GetPolicy(context.Context, *GetImportPolicyRequest) (*ImportPolicyStruct, error)
	ListPolicy(context.Context, *ListImportPolicyRequest) (*ListImportPolicyReply, error)
	UpdatePolicy(context.Context, *ImportPolicyStruct) (*ImportPolicyStruct, error)
	DeletePolicy(context.Context, *DeleteImportPolicyRequest) (*ImportPolicyStruct, error)
	mustEmbedUnimplementedImportPolicyServer()
}

// UnimplementedImportPolicyServer must be embedded to have forward compatible implementations.
type UnimplementedImportPolicyServer struct {
}

func (UnimplementedImportPolicyServer) CreatePolicy(context.Context, *ImportPolicyStruct) (*ImportPolicyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePolicy not implemented")
}
func (UnimplementedImportPolicyServer) GetPolicy(context.Context, *GetImportPolicyRequest) (*ImportPolicyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedImportPolicyServer) ListPolicy(context.Context, *ListImportPolicyRequest) (*ListImportPolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPolicy not implemented")
}
func (UnimplementedImportPolicyServer) UpdatePolicy(context.Context, *ImportPolicyStruct) (*ImportPolicyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePolicy not implemented")
}
func (UnimplementedImportPolicyServer) DeletePolicy(context.Context, *DeleteImportPolicyRequest) (*ImportPolicyStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePolicy not implemented")
}
func (UnimplementedImportPolicyServer) mustEmbedUnimplementedImportPolicyServer() {}

// UnsafeImportPolicyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImportPolicyServer will
// result in compilation errors.
type UnsafeImportPolicyServer interface {
	mustEmbedUnimplementedImportPolicyServer()
}

func RegisterImportPolicyServer(s grpc.ServiceRegistrar, srv ImportPolicyServer) {
	s.RegisterService(&ImportPolicy_ServiceDesc, srv)
}

func _ImportPolicy_CreatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPolicyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportPolicyServer).CreatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.ImportPolicy/CreatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportPolicyServer).CreatePolicy(ctx, req.(*ImportPolicyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportPolicy_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImportPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportPolicyServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.ImportPolicy/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportPolicyServer).GetPolicy(ctx, req.(*GetImportPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportPolicy_ListPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImportPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportPolicyServer).ListPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.ImportPolicy/ListPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportPolicyServer).ListPolicy(ctx, req.(*ListImportPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportPolicy_UpdatePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPolicyStruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportPolicyServer).UpdatePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.ImportPolicy/UpdatePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportPolicyServer).UpdatePolicy(ctx, req.(*ImportPolicyStruct))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImportPolicy_DeletePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteImportPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportPolicyServer).DeletePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.policy.v1.ImportPolicy/DeletePolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportPolicyServer).DeletePolicy(ctx, req.(*DeleteImportPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImportPolicy_ServiceDesc is the grpc.ServiceDesc for ImportPolicy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImportPolicy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.policy.v1.ImportPolicy",
	HandlerType: (*ImportPolicyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePolicy",
			Handler:    _ImportPolicy_CreatePolicy_Handler,
		},
		{
			MethodName: "GetPolicy",
			Handler:    _ImportPolicy_GetPolicy_Handler,
		},
		{
			MethodName: "ListPolicy",
			Handler:    _ImportPolicy_ListPolicy_Handler,
		},
		{
			MethodName: "UpdatePolicy",
			Handler:    _ImportPolicy_UpdatePolicy_Handler,
		},
		{
			MethodName: "DeletePolicy",
			Handler:    _ImportPolicy_DeletePolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "policy/v1/policy.proto",
}
