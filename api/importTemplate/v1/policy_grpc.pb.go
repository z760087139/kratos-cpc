// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0--rc2
// source: importTemplate/v1/policy.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImportTemplateClient is the client API for ImportTemplate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImportTemplateClient interface {
	// 服务功能
	GetPolicy(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*ImportTemplateStruct, error)
}

type importTemplateClient struct {
	cc grpc.ClientConnInterface
}

func NewImportTemplateClient(cc grpc.ClientConnInterface) ImportTemplateClient {
	return &importTemplateClient{cc}
}

func (c *importTemplateClient) GetPolicy(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*ImportTemplateStruct, error) {
	out := new(ImportTemplateStruct)
	err := c.cc.Invoke(ctx, "/api.importTemplate.v1.ImportTemplate/GetPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImportTemplateServer is the policy API for ImportTemplate service.
// All implementations must embed UnimplementedImportTemplateServer
// for forward compatibility
type ImportTemplateServer interface {
	// 服务功能
	GetPolicy(context.Context, *GetTemplateRequest) (*ImportTemplateStruct, error)
	mustEmbedUnimplementedImportTemplateServer()
}

// UnimplementedImportTemplateServer must be embedded to have forward compatible implementations.
type UnimplementedImportTemplateServer struct {
}

func (UnimplementedImportTemplateServer) GetPolicy(context.Context, *GetTemplateRequest) (*ImportTemplateStruct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedImportTemplateServer) mustEmbedUnimplementedImportTemplateServer() {}

// UnsafeImportTemplateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImportTemplateServer will
// result in compilation errors.
type UnsafeImportTemplateServer interface {
	mustEmbedUnimplementedImportTemplateServer()
}

func RegisterImportTemplateServer(s grpc.ServiceRegistrar, srv ImportTemplateServer) {
	s.RegisterService(&ImportTemplate_ServiceDesc, srv)
}

func _ImportTemplate_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImportTemplateServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.importTemplate.v1.ImportTemplate/GetPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImportTemplateServer).GetPolicy(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImportTemplate_ServiceDesc is the grpc.ServiceDesc for ImportTemplate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImportTemplate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.importTemplate.v1.ImportTemplate",
	HandlerType: (*ImportTemplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicy",
			Handler:    _ImportTemplate_GetPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "importTemplate/v1/policy.proto",
}
